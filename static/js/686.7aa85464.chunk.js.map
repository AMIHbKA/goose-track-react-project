{"version":3,"file":"static/js/686.7aa85464.chunk.js","mappings":"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","sources":["components/Calendar/CalendarHead/CalendarHeadStyled.jsx","components/Calendar/CalendarHead/DayCell/DayCellStyled.jsx","components/Calendar/CalendarHead/DayCell/DayName/DayName.jsx","components/Calendar/CalendarHead/DayCell/DayCell.jsx","components/Calendar/CalendarHead/CalendarHead.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/AddTaskBtn/AddTaskBtn.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/ColumnHeadBar/ColumnHeadBarStyled.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/ColumnHeadBar/ColumnHeadBar.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/ColumnsTasksList/EmptyListSpaceFiller/EmptyListSpaceFiller.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/ColumnsTasksList/ColumnsTasksList.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/TasksColumnStyled.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumn/TasksColumn.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumnListStyled.jsx","components/Calendar/ChoosedDay/TasksColumnList/TasksColumnList.jsx","components/Calendar/ChoosedDay/ChoosedDayContainer.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","components/Calendar/DateBadge/DateBadge.jsx","utilities/dateHelpers.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst CalendarHeadStyled = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n\n  width: 100%;\n\n  margin-top: 24px;\n  margin-bottom: 14px;\n\n  ${({ condensed }) =>\n    condensed ? `padding: 15px 0 14px;` : `padding: 17px 0 16px;`};\n\n  background-color: ${({ theme }) => theme.choosedMonth.dateBackground};\n\n  border: 1px solid ${({ theme }) => theme.choosedMonth.borderColor};\n  border-radius: 8px;\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    margin-top: 32px;\n\n    ${({ condensed }) =>\n      condensed ? `padding: 11px 0 10px;` : `padding: 15px 0 14px;`};\n  }\n`;\n\nexport default CalendarHeadStyled;\n","import styled from 'styled-components';\n\nconst DayCellStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  .date-badge-wrapper {\n    margin-top: 6px;\n  }\n\n  .date-wrapper {\n    text-align: center;\n\n    ${({ pointer }) =>\n      pointer &&\n      `\n    cursor: pointer;\n  `}\n  }\n`;\n\nexport default DayCellStyled;\n","import styled from 'styled-components';\n\nconst DayName = styled.div`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 18px;\n\n  text-align: center;\n\n  ${({ theme, isWeekend }) =>\n    isWeekend &&\n    `\n        color: ${theme.colors.primary};\n    `};\n`;\n\nexport default DayName;\n","import { useContext, useCallback } from 'react';\nimport { useWindowWidth } from 'hooks/useWindowWidth';\nimport { ThemeContext } from 'styled-components';\nimport DateBadge from 'components/Calendar/DateBadge/DateBadge';\nimport DayCellStyled from './DayCellStyled';\nimport DayName from './DayName/DayName';\n\nconst DayCell = ({ day, date, activeDate, onDateClick }) => {\n  const windowWidth = useWindowWidth();\n\n  const theme = useContext(ThemeContext);\n\n  const dayName = useCallback(\n    () =>\n      windowWidth < Number.parseInt(theme.breakpoints.tablet)\n        ? day.slice(0, 1)\n        : day,\n    [day, windowWidth, theme]\n  );\n\n  const isWeekend = !date && (day === 'SAT' || day === 'SUN');\n\n  const isActive =\n    date && activeDate && date.dateObject.getDate() === activeDate.getDate();\n\n  if (date) {\n    return (\n      <DayCellStyled pointer={onDateClick && true}>\n        <div className=\"date-wrapper\" onClick={onDateClick}>\n          <DayName isWeekend={isWeekend}>{dayName()}</DayName>\n          <div className=\"date-badge-wrapper\">\n            <DateBadge isActive={isActive}>{date.day}</DateBadge>\n          </div>\n        </div>\n      </DayCellStyled>\n    );\n  }\n\n  return <DayName isWeekend={isWeekend}>{dayName()}</DayName>;\n};\n\nexport default DayCell;\n","import React from 'react';\nimport CalendarHeadStyled from './CalendarHeadStyled';\nimport DayCell from './DayCell/DayCell';\n\nconst CalendarHead = ({ weekDates, activeDate, onDateClick }) => {\n  const days = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];\n\n  return (\n    <CalendarHeadStyled condensed={weekDates}>\n      {days.map((day, index) => (\n        <DayCell\n          key={day}\n          day={day}\n          date={weekDates ? weekDates[index] : null}\n          activeDate={activeDate}\n          onDateClick={onDateClick && onDateClick}\n        />\n      ))}\n    </CalendarHeadStyled>\n  );\n};\n\nexport default CalendarHead;\n","import styled from 'styled-components';\n\nconst AddTaskBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  /* position: absolute; */\n\n  /* bottom: 20px;\n  left: 18px;\n  right: 18px; */\n\n  /* width: calc(100vw - 40px - 18px - 18px); */\n\n  width: 100%;\n\n  padding: 12px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 18px;\n\n  color: ${({ theme }) => theme.colors.mainText};\n\n  background-color: ${({ theme }) => theme.choosedDay.addBtnBackground};\n\n  border-radius: 8px;\n\n  ${({ theme }) =>\n    theme.choosedDay.addBtnBorder\n      ? `border: ${theme.choosedDay.addBtnBorder};`\n      : 'border: none;'}\n\n  div {\n    margin-left: 8px;\n    padding-top: 2px;\n  }\n`;\n\nexport default AddTaskBtn;\n","import styled from 'styled-components';\n\nconst ColumnHeadBarStyled = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 7px 0;\n\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 20px;\n\n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    font-size: 20px;\n    line-height: 24px;\n  }\n`;\n\nexport default ColumnHeadBarStyled;\n","import { PlusCircleIcon } from 'UI';\nimport ColumnHeadBarStyled from './ColumnHeadBarStyled';\nimport { useTheme } from 'styled-components';\nimport { useMobile } from 'hooks';\n\nconst ColumnHeadBar = ({ stage }) => {\n  const {\n    colors: { mainText },\n  } = useTheme();\n\n  const isMobile = useMobile();\n\n  return (\n    <ColumnHeadBarStyled>\n      {stage}\n      <PlusCircleIcon size={isMobile ? 22 : 24} stroke={mainText} />\n    </ColumnHeadBarStyled>\n  );\n};\n\nexport default ColumnHeadBar;\n","import styled from 'styled-components';\n\nconst EmptyListSpaceFiller = styled.div`\n  height: 35px;\n  width: 100%;\n`;\n\nexport default EmptyListSpaceFiller;\n","import EmptyListSpaceFiller from './EmptyListSpaceFiller/EmptyListSpaceFiller';\n\nconst ColumnsTasksList = ({ tasks }) => {\n  if (!tasks) {\n    return <EmptyListSpaceFiller />;\n  }\n\n  return <div>Tasks EXISTS!</div>;\n};\n\nexport default ColumnsTasksList;\n","import styled from 'styled-components';\n\nconst TasksColumnStyled = styled.div`\n  position: relative;\n\n  flex-grow: 1;\n\n  width: calc(100vw - 40px);\n\n  padding: 18px 18px 20px;\n\n  background-color: ${({ theme }) => theme.choosedMonth.dateBackground};\n\n  border: 1px solid ${({ theme }) => theme.choosedMonth.borderColor};\n  border-radius: 8px;\n\n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    width: calc((100vw - 64px - 16px) / 2);\n\n    padding: 20px;\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints.laptop}) {\n    width: calc((100vw - 64px - 289px - (27px * 2)) / 3);\n  }\n`;\n\nexport default TasksColumnStyled;\n","import { PlusIcon } from 'UI';\nimport AddTaskBtn from './AddTaskBtn/AddTaskBtn';\nimport ColumnHeadBar from './ColumnHeadBar/ColumnHeadBar';\nimport ColumnsTasksList from './ColumnsTasksList/ColumnsTasksList';\nimport TasksColumnStyled from './TasksColumnStyled';\nimport { useTheme } from 'styled-components';\n\nconst TasksColumn = ({ stage }) => {\n  const {\n    colors: { mainText },\n  } = useTheme();\n\n  return (\n    <TasksColumnStyled>\n      <ColumnHeadBar stage={stage} />\n      <ColumnsTasksList />\n      <AddTaskBtn>\n        <PlusIcon size={24} stroke={mainText} /> <div>AddTask</div>\n      </AddTaskBtn>\n    </TasksColumnStyled>\n  );\n};\n\nexport default TasksColumn;\n","import styled from 'styled-components';\n\nexport const TasksColumnListContainer = styled.div`\n  flex-grow: 1;\n\n  width: calc(100vw - 40px);\n\n  overflow-x: auto;\n\n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    width: calc(100vw - 64px);\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints.laptop}) {\n    width: calc(100vw - 64px - 289px);\n  }\n`;\n\nexport const TasksColumnListWrapper = styled.div`\n  display: inline-flex;\n  gap: 16px;\n\n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    justify-content: space-between;\n  }\n\n  @media (min-width: ${props => props.theme.breakpoints.laptop}) {\n    gap: 27px;\n  }\n`;\n","import TasksColumn from './TasksColumn/TasksColumn';\nimport {\n  TasksColumnListContainer,\n  TasksColumnListWrapper,\n} from './TasksColumnListStyled';\n\nconst TasksColumnList = () => {\n  const stages = ['To do', 'In progress', 'Done'];\n\n  return (\n    <TasksColumnListContainer>\n      <TasksColumnListWrapper>\n        {stages.map(stage => (\n          <TasksColumn key={stage} stage={stage} />\n        ))}\n      </TasksColumnListWrapper>\n    </TasksColumnListContainer>\n  );\n};\n\nexport default TasksColumnList;\n","import styled from 'styled-components';\n\nconst ChoosedDayContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n\n  height: 100%;\n`;\n\nexport default ChoosedDayContainer;\n","import { getWeekDatesForDate } from 'utilities/dateHelpers';\nimport CalendarHead from '../CalendarHead/CalendarHead';\nimport TasksColumnList from './TasksColumnList/TasksColumnList';\nimport ChoosedDayContainer from './ChoosedDayContainer';\n\nconst ChoosedDay = () => {\n  const date = new Date('2023-09-01');\n  const weekDates = getWeekDatesForDate(date);\n\n  return (\n    <ChoosedDayContainer>\n      <CalendarHead\n        weekDates={weekDates}\n        activeDate={date}\n        onDateClick={() => {}}\n      />\n      <TasksColumnList />\n    </ChoosedDayContainer>\n  );\n};\n\nexport default ChoosedDay;\n","import styled from 'styled-components';\n\nconst DateBadge = styled.div`\n  padding: 4px 6px;\n\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 14px;\n\n  ${({ isActive, theme }) =>\n    isActive &&\n    `\n    background-color: ${theme.colors.primary};\n    color: ${theme.choosedMonth.todayBadgeTextColor};\n    border-radius: 6px;\n  `}\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    padding: 4px 8px;\n\n    font-size: 16px;\n    line-height: 18px;\n\n    ${({ isActive }) =>\n      isActive &&\n      `\n    border-radius: 8px;\n  `}\n  }\n`;\n\nexport default DateBadge;\n","import { startOfWeek, endOfWeek, eachDayOfInterval, format } from 'date-fns';\n\nconst getDayOfWeek = isoDate => {\n  const date = new Date(isoDate);\n  return date.getDay();\n};\n\nexport const trimCalendarDates = calendarDates => {\n  let startIdx = 0;\n\n  for (let i = 0; i < calendarDates.length; i++) {\n    const obj = calendarDates[i];\n\n    if (obj.type === 'current') {\n      if (getDayOfWeek(obj.iso) === 1) {\n        startIdx = i;\n\n        break;\n      }\n\n      for (let j = i - 1; j >= 0; j--) {\n        if (\n          calendarDates[j].type === 'previous' &&\n          getDayOfWeek(calendarDates[j].iso) === 1\n        ) {\n          startIdx = j;\n\n          break;\n        }\n      }\n\n      break;\n    }\n  }\n\n  return calendarDates.slice(startIdx, startIdx + 35);\n};\n\nexport const getDateFromMonthString = monthString => {\n  const [monthStr, yearStr] = monthString.split(' ');\n\n  const monthNumber = new Date(Date.parse(`${monthStr} 1, 2023`)).getMonth();\n\n  const year = parseInt(yearStr);\n\n  const date = new Date(year, monthNumber);\n\n  return date;\n};\n\nexport const getWeekDatesForDate = date => {\n  const start = startOfWeek(date, { weekStartsOn: 1 });\n  const end = endOfWeek(date, { weekStartsOn: 1 });\n\n  return eachDayOfInterval({ start, end }).map(d => ({\n    date: format(d, 'yyyy-MM-dd'),\n    day: format(d, 'd'),\n    dateObject: d,\n  }));\n};\n"],"names":["styled","_templateObject","_taggedTemplateLiteral","_ref","condensed","_ref2","theme","choosedMonth","dateBackground","_ref3","borderColor","_ref4","breakpoints","tablet","_ref5","pointer","isWeekend","concat","colors","primary","day","date","activeDate","onDateClick","windowWidth","useWindowWidth","useContext","ThemeContext","dayName","useCallback","Number","parseInt","slice","isActive","dateObject","getDate","_jsx","DayCellStyled","children","_jsxs","className","onClick","DayName","DateBadge","weekDates","CalendarHeadStyled","map","index","DayCell","mainText","choosedDay","addBtnBackground","addBtnBorder","props","stage","useTheme","isMobile","useMobile","ColumnHeadBarStyled","PlusCircleIcon","size","stroke","tasks","EmptyListSpaceFiller","laptop","TasksColumnStyled","ColumnHeadBar","ColumnsTasksList","AddTaskBtn","PlusIcon","TasksColumnListContainer","TasksColumnListWrapper","_templateObject2","TasksColumn","Date","getWeekDatesForDate","ChoosedDayContainer","CalendarHead","TasksColumnList","todayBadgeTextColor","getDayOfWeek","isoDate","getDay","trimCalendarDates","calendarDates","startIdx","i","length","obj","type","iso","j","getDateFromMonthString","monthString","_monthString$split","split","_monthString$split2","_slicedToArray","monthStr","yearStr","monthNumber","parse","getMonth","year","start","startOfWeek","weekStartsOn","end","endOfWeek","eachDayOfInterval","d","format"],"sourceRoot":""}