{"version":3,"file":"static/js/727.08c909b9.chunk.js","mappings":"uSAUMA,EAAiBC,EAAAA,GAAW,CAChCC,KAAMD,EAAAA,KACHE,IAAI,GAAI,iCACRC,SAAS,YACZC,MAAOJ,EAAAA,KAAaI,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUL,EAAAA,KACPM,IAAI,EAAG,gCACPJ,IAAI,GAAI,iCACRC,SAAS,cAGDI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAMC,GAAM,IAAAjB,EAAAG,EAAAC,EAAAc,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACF,OAArBtB,EAA0BiB,EAA1BjB,KAAMG,EAAoBc,EAApBd,MAAOC,EAAaa,EAAbb,SAAQgB,EAAAE,KAAA,EACAf,GAASgB,EAAAA,EAAAA,IAAS,CAAEvB,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KAAa,KAAD,EAApEc,EAAcE,EAAAI,KAGhBD,EAAAA,GAAAA,UAAAA,MAAyBL,IAC3BX,GAASkB,EAAAA,EAAAA,IAAM,CAAEtB,MAAAA,EAAOC,SAAAA,KACzB,wBAAAgB,EAAAM,OAAA,GAAAV,EAAA,KACF,gBARiBW,GAAA,OAAAf,EAAAgB,MAAA,KAAAC,UAAA,KAclB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAa,CAAAC,SAAA,EACZF,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAD,SAAA,EACVE,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAAAH,SAAC,aAEZE,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,cAAe,CAAErC,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDkC,iBAAkBxC,EAClByC,SAAU,SAACtB,EAAMuB,GAAyB,IAArBC,EAAaD,EAAbC,cACnBC,YAAW,WACT/B,EAAaM,GAEbwB,GAAc,EAChB,GAAG,IACL,EAAET,SAED,SAAAW,GAAA,IAAGC,EAAOD,EAAPC,QAASC,EAAMF,EAANE,OAAM,OACjBf,EAAAA,EAAAA,MAACgB,EAAAA,GAAI,CAAAd,SAAA,EACHF,EAAAA,EAAAA,MAACiB,EAAAA,GAAU,CAAAf,SAAA,EACTE,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJhD,KAAK,OACLiD,MAAM,OACNC,KAAK,OACLC,YAAY,kBACZC,MAAOP,EAAO7C,KACd4C,QAASA,EAAQ5C,QAGnBkC,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJhD,KAAK,QACLiD,MAAM,gBACNC,KAAK,QACLC,YAAY,cACZC,MAAOP,EAAO1C,MACdyC,QAASA,EAAQzC,SAEnB+B,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJhD,KAAK,WACLiD,MAAM,WACNC,KAAK,WACLC,YAAY,iBACZC,MAAOP,EAAOzC,SACdwC,QAASA,EAAQxC,eAGrB8B,EAAAA,EAAAA,KAACmB,EAAAA,GAAU,CAACH,KAAK,SAASI,GAAG,OAAMtB,SAAC,cAG/B,QAIbE,EAAAA,EAAAA,KAACqB,EAAAA,GAAU,CAACC,QAxDS,WACvB/C,EAAS,SACX,EAsD0CuB,SAAC,aAG7C,E,UC7EA,EAbqB,WACnB,OACEE,EAAAA,EAAAA,KAAA,WAASuB,MAAO,CAAEC,WAAY,UAAWC,OAAQ,SAAU3B,UACzDF,EAAAA,EAAAA,MAAC8B,EAAAA,GAAS,CAACC,aAAW,EAAA7B,SAAA,EACpBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,CAAA9B,UACLE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,oBAETE,EAAAA,EAAAA,KAAC5B,EAAY,QAIrB,C","sources":["components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Input, AuthButton, LinkButton } from 'components';\nimport { FormFields, FormHeader, FormContainer } from 'UI/CommonStyles';\nimport { FormWrapper } from 'UI/CommonStyles/FormStyled';\nimport { useDispatch } from 'react-redux';\nimport { logIn, register } from 'redux/auth/operations';\nimport { useNavigate } from 'react-router';\n\nconst registerSchema = Yup.object({\n  name: Yup.string()\n    .max(15, 'Must be 15 characters or less')\n    .required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(8, 'Must be 8 characters or more')\n    .max(32, 'Must be 32 characters or less')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = async values => {\n    const { name, email, password } = values;\n    const registerResult = await dispatch(register({ name, email, password }));\n\n    // if registration is success, login\n    if (register.fulfilled.match(registerResult)) {\n      dispatch(logIn({ email, password }));\n    }\n  };\n\n  const handleLogInClick = () => {\n    navigate('/login');\n  };\n\n  return (\n    <FormContainer>\n      <FormWrapper>\n        <FormHeader>Sign Up</FormHeader>\n\n        <Formik\n          initialValues={{ name: '', email: '', password: '' }}\n          validationSchema={registerSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n              handleSubmit(values);\n\n              setSubmitting(false);\n            }, 400);\n          }}\n        >\n          {({ touched, errors }) => (\n            <Form>\n              <FormFields>\n                <Input\n                  name=\"name\"\n                  label=\"Name\"\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  error={errors.name}\n                  touched={touched.name}\n                />\n\n                <Input\n                  name=\"email\"\n                  label=\"Email Address\"\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  error={errors.email}\n                  touched={touched.email}\n                />\n                <Input\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  placeholder=\"Enter Password\"\n                  error={errors.password}\n                  touched={touched.password}\n                />\n              </FormFields>\n              <AuthButton type=\"submit\" mt=\"32px\">\n                Sign Up\n              </AuthButton>\n            </Form>\n          )}\n        </Formik>\n      </FormWrapper>\n      <LinkButton onClick={handleLogInClick}>Log In</LinkButton>\n    </FormContainer>\n  );\n};\n","import { Container } from 'components';\nimport { RegisterForm } from 'components/Forms/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nconst RegisterPage = () => {\n  return (\n    <section style={{ background: '#dcebf7', height: '100vh' }}>\n      <Container full_center>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </Container>\n    </section>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","Yup","name","max","required","email","password","min","RegisterForm","dispatch","useDispatch","navigate","useNavigate","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","registerResult","wrap","_context","prev","next","register","sent","logIn","stop","_x","apply","arguments","_jsxs","FormContainer","children","FormWrapper","_jsx","FormHeader","Formik","initialValues","validationSchema","onSubmit","_ref2","setSubmitting","setTimeout","_ref3","touched","errors","Form","FormFields","Input","label","type","placeholder","error","AuthButton","mt","LinkButton","onClick","style","background","height","Container","full_center","Helmet"],"sourceRoot":""}