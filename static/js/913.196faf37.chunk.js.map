{"version":3,"file":"static/js/913.196faf37.chunk.js","mappings":"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","sources":["components/Calendar/CalendarHead/CalendarHeadStyled.jsx","components/Calendar/CalendarHead/DayCell/DayCellStyled.jsx","components/Calendar/CalendarHead/DayCell/DayName/DayName.jsx","components/Calendar/CalendarHead/DayCell/DayCell.jsx","hooks/useWindowWidth.js","components/Calendar/CalendarHead/CalendarHead.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","components/Calendar/DateBadge/DateBadge.jsx","utilities/dateHelpers.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst CalendarHeadStyled = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n\n  width: 100%;\n\n  margin-top: 24px;\n  margin-bottom: 14px;\n\n  ${({ condensed }) =>\n    condensed ? `padding: 15px 0 14px;` : `padding: 17px 0 16px;`};\n\n  background-color: ${({ theme }) => theme.choosedMonth.dateBackground};\n\n  border: 1px solid ${({ theme }) => theme.choosedMonth.borderColor};\n  border-radius: 8px;\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    margin-top: 32px;\n\n    ${({ condensed }) =>\n      condensed ? `padding: 11px 0 10px;` : `padding: 15px 0 14px;`};\n  }\n`;\n\nexport default CalendarHeadStyled;\n","import styled from 'styled-components';\n\nconst DayCellStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  .date-badge-wrapper {\n    margin-top: 6px;\n  }\n\n  .date-wrapper {\n    text-align: center;\n\n    ${({ pointer }) =>\n      pointer &&\n      `\n    cursor: pointer;\n  `}\n  }\n`;\n\nexport default DayCellStyled;\n","import styled from 'styled-components';\n\nconst DayName = styled.div`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 18px;\n\n  text-align: center;\n\n  ${({ theme, isWeekend }) =>\n    isWeekend &&\n    `\n        color: ${theme.colors.primary};\n    `};\n`;\n\nexport default DayName;\n","import { useContext, useCallback } from 'react';\nimport { useWindowWidth } from 'hooks/useWindowWidth';\nimport { ThemeContext } from 'styled-components';\nimport DateBadge from 'components/Calendar/DateBadge/DateBadge';\nimport DayCellStyled from './DayCellStyled';\nimport DayName from './DayName/DayName';\n\nconst DayCell = ({ day, date, activeDate, onDateClick }) => {\n  const windowWidth = useWindowWidth();\n\n  const theme = useContext(ThemeContext);\n\n  const dayName = useCallback(\n    () =>\n      windowWidth < Number.parseInt(theme.breakpoints.tablet)\n        ? day.slice(0, 1)\n        : day,\n    [day, windowWidth, theme]\n  );\n\n  const isWeekend = !date && (day === 'SAT' || day === 'SUN');\n\n  const isActive =\n    date && activeDate && date.dateObject.getDate() === activeDate.getDate();\n\n  if (date) {\n    return (\n      <DayCellStyled pointer={onDateClick && true}>\n        <div className=\"date-wrapper\" onClick={onDateClick}>\n          <DayName isWeekend={isWeekend}>{dayName()}</DayName>\n          <div className=\"date-badge-wrapper\">\n            <DateBadge isActive={isActive}>{date.day}</DateBadge>\n          </div>\n        </div>\n      </DayCellStyled>\n    );\n  }\n\n  return <DayName isWeekend={isWeekend}>{dayName()}</DayName>;\n};\n\nexport default DayCell;\n","import { useEffect, useState } from 'react';\n\n/**Хук для отримання поточної ширини екрана */\nexport const useWindowWidth = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return windowWidth;\n};\n","import React from 'react';\nimport CalendarHeadStyled from './CalendarHeadStyled';\nimport DayCell from './DayCell/DayCell';\n\nconst CalendarHead = ({ weekDates, activeDate, onDateClick }) => {\n  const days = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];\n\n  return (\n    <CalendarHeadStyled condensed={weekDates}>\n      {days.map((day, index) => (\n        <DayCell\n          key={day}\n          day={day}\n          date={weekDates ? weekDates[index] : null}\n          activeDate={activeDate}\n          onDateClick={onDateClick && onDateClick}\n        />\n      ))}\n    </CalendarHeadStyled>\n  );\n};\n\nexport default CalendarHead;\n","import React from 'react';\n\nimport CalendarHead from '../CalendarHead/CalendarHead';\nimport { getWeekDatesForDate } from 'utilities/dateHelpers';\n\nconst ChoosedDay = () => {\n  const date = new Date('2023-09-01');\n  const weekDates = getWeekDatesForDate(date);\n\n  return (\n    <>\n      <CalendarHead\n        weekDates={weekDates}\n        activeDate={date}\n        onDateClick={() => {}}\n      />\n    </>\n  );\n};\n\nexport default ChoosedDay;\n","import styled from 'styled-components';\n\nconst DateBadge = styled.div`\n  padding: 4px 6px;\n\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 14px;\n\n  ${({ isActive, theme }) =>\n    isActive &&\n    `\n    background-color: ${theme.colors.primary};\n    color: ${theme.choosedMonth.todayBadgeTextColor};\n    border-radius: 6px;\n  `}\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    padding: 4px 8px;\n\n    font-size: 16px;\n    line-height: 18px;\n\n    ${({ isActive }) =>\n      isActive &&\n      `\n    border-radius: 8px;\n  `}\n  }\n`;\n\nexport default DateBadge;\n","import { startOfWeek, endOfWeek, eachDayOfInterval, format } from 'date-fns';\n\nconst getDayOfWeek = isoDate => {\n  const date = new Date(isoDate);\n  return date.getDay();\n};\n\nexport const trimCalendarDates = calendarDates => {\n  let startIdx = 0;\n\n  for (let i = 0; i < calendarDates.length; i++) {\n    const obj = calendarDates[i];\n\n    if (obj.type === 'current') {\n      if (getDayOfWeek(obj.iso) === 1) {\n        startIdx = i;\n\n        break;\n      }\n\n      for (let j = i - 1; j >= 0; j--) {\n        if (\n          calendarDates[j].type === 'previous' &&\n          getDayOfWeek(calendarDates[j].iso) === 1\n        ) {\n          startIdx = j;\n\n          break;\n        }\n      }\n\n      break;\n    }\n  }\n\n  return calendarDates.slice(startIdx, startIdx + 35);\n};\n\nexport const getDateFromMonthString = monthString => {\n  const [monthStr, yearStr] = monthString.split(' ');\n\n  const monthNumber = new Date(Date.parse(`${monthStr} 1, 2023`)).getMonth();\n\n  const year = parseInt(yearStr);\n\n  const date = new Date(year, monthNumber);\n\n  return date;\n};\n\nexport const getWeekDatesForDate = date => {\n  const start = startOfWeek(date, { weekStartsOn: 1 });\n  const end = endOfWeek(date, { weekStartsOn: 1 });\n\n  return eachDayOfInterval({ start, end }).map(d => ({\n    date: format(d, 'yyyy-MM-dd'),\n    day: format(d, 'd'),\n    dateObject: d,\n  }));\n};\n"],"names":["styled","_templateObject","_taggedTemplateLiteral","_ref","condensed","_ref2","theme","choosedMonth","dateBackground","_ref3","borderColor","_ref4","breakpoints","tablet","_ref5","pointer","isWeekend","concat","colors","primary","day","date","activeDate","onDateClick","windowWidth","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowWidth","useContext","ThemeContext","dayName","useCallback","Number","parseInt","slice","isActive","dateObject","getDate","_jsx","DayCellStyled","children","_jsxs","className","onClick","DayName","DateBadge","weekDates","CalendarHeadStyled","map","index","DayCell","Date","getWeekDatesForDate","_Fragment","CalendarHead","todayBadgeTextColor","getDayOfWeek","isoDate","getDay","trimCalendarDates","calendarDates","startIdx","i","length","obj","type","iso","j","getDateFromMonthString","monthString","_monthString$split","split","_monthString$split2","monthStr","yearStr","monthNumber","parse","getMonth","year","start","startOfWeek","weekStartsOn","end","endOfWeek","eachDayOfInterval","d","format"],"sourceRoot":""}